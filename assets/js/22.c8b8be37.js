(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{434:function(t,v,r){"use strict";r.r(v);var a=r(2),_=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),v("p",[t._v("浏览器应用领域愈发广泛，消息队列中的任务（粗时间粒度）无法胜任部分领域需求，由此衍生出“微任务”，"),v("strong",[t._v("微任务可以在实时性和效率之间做一个权衡")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"宏任务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),v("h3",{attrs:{id:"消息队列中的任务可以称之为宏任务。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#消息队列中的任务可以称之为宏任务。"}},[t._v("#")]),t._v(" "),v("strong",[t._v("消息队列中的任务可以称之为宏任务。")])]),t._v(" "),v("p",[t._v("浏览器页面引入"),v("strong",[t._v("消息队列 + 事件循环")]),t._v("机制，来协调任务有条不紊的在页面中执行。"),v("br"),t._v("\n渲染进程内部维护多个消息队列：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("一般消息队列")]),t._v(" => 维护浏览器的大部分任务：\n"),v("ul",[v("li",[t._v("渲染任务：DOM解析、布局计算、绘制")]),t._v(" "),v("li",[t._v("用户交互：鼠标点击、页面缩放")]),t._v(" "),v("li",[t._v("执行JavaScript")]),t._v(" "),v("li",[t._v("网络请求、文件读写事件的完成...more")])])]),t._v(" "),v("li",[v("strong",[t._v("延迟消息队列")]),t._v(" => 维护setTimeout、setInterval...more")])]),t._v(" "),v("p",[v("strong",[t._v("事件循环")]),t._v("：主线程for循环不断从上述消息队列中取出任务并且执行。"),v("br"),t._v("\n消息队列中宏任务的执行流程：")]),t._v(" "),v("ol",[v("li",[t._v("从多个消息队列中找出最早进入队列的任务（oldest Task）。")]),t._v(" "),v("li",[t._v("循环系统记录任务开始执行的事件，同时把oldest Task设置为当前正在执行的任务。")]),t._v(" "),v("li",[t._v("当任务执行完毕，删除当前正在执行的任务，且从对应消息队列中删除该oldest Task。")]),t._v(" "),v("li",[t._v("统计任务执行完成的时长等信息。")])]),t._v(" "),v("h3",{attrs:{id:"宏任务为何无法满足时间精度高的场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#宏任务为何无法满足时间精度高的场景"}},[t._v("#")]),t._v(" 宏任务为何无法满足时间精度高的场景？")]),t._v(" "),v("p",[t._v("页面渲染、各种IO完成时间、执行JavaScript、用户交互等任务随时都可能添加到消息队列中，并且是"),v("strong",[t._v("系统进行操作添加的")]),t._v("，所以JavaScript代码无法准确的把任务添加到队列的指定位置，"),v("strong",[t._v("无法确定消息队列中任务的位置，就很难控制任务开始的时间")]),t._v("。"),v("br"),t._v("\n场景：比如使用setTimeout设置一个回调任务，并且按照给定的时间延迟执行。\n实际上并不一定能按照我们所想的去执行，我们用setTimeout设置回调的间隙，"),v("strong",[t._v("消息队列就很有可能被系统插入很多系统及的任务，如果中间插入的任务执行过久，那么就会影响setTimeout这个宏任务的执行")]),t._v("。所以宏任务的时间粒度较大，执行的时间间隔无法精准控制。")]),t._v(" "),v("h2",{attrs:{id:"微任务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),v("p",[t._v("实现"),v("strong",[t._v("异步回调")]),t._v("的两种方式：")]),t._v(" "),v("ol",[v("li",[t._v("把异步回调函数封装成宏任务，添加到消息队列尾部，当系统循环到该任务，执行该回调函数（setTimeout、XMLHttpRequest的回调函数就是这种实现方式）。")]),t._v(" "),v("li",[t._v("执行时机在"),v("strong",[t._v("主函数执行结束之后、当前宏任务结束之前")]),t._v("执行回调函数，这种就是微任务的体现形式。")])]),t._v(" "),v("h3",{attrs:{id:"是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么？")]),t._v(" "),v("p",[t._v("微任务："),v("strong",[t._v("一个需要异步执行的函数，执行时机在主函数执行结束之后、当前宏任务结束之前。")])]),t._v(" "),v("h3",{attrs:{id:"执行机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行机制"}},[t._v("#")]),t._v(" 执行机制")]),t._v(" "),v("p",[t._v("JavaScript脚本执行的时候，V8首先会其创建一个"),v("strong",[t._v("全局执行上下文")]),t._v("，与此同时还会创建一个微任务队列，因为在当前宏任务执行的过程中，会产生多个微任务，需要微任务队列进行维护。微任务队列是V8引擎内部使用的，无法使用JavaScript直接访问。\n"),v("strong",[t._v("每个宏任务都会关联一个微任务队列。")]),v("br"),t._v("\n如何产生微任务？")]),t._v(" "),v("ul",[v("li",[t._v("使用"),v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationObserver"),v("OutboundLink")],1),t._v("监控DOM节点，每当JavaScript修改DOM节点发生变化，就会产生DOM变化记录的微任务。")]),t._v(" "),v("li",[t._v("使用Promise，调用Promise.resolve() or Promise.reject()也会产生微任务。\n产生的微任务都会被JavaScript引擎按照顺序保存到微任务队列中。")])]),t._v(" "),v("p",[t._v("如何执行微任务？")]),t._v(" "),v("ul",[v("li",[t._v("一般情况下，当前宏任务中的JavaScript即将执行完毕（JavaScript引擎即将退出全局执行上下文并且清空调用栈），JavaScript引擎会检查全局执行上下文中的微任务队列，按照顺序执行微任务队列的任务。")]),t._v(" "),v("li",[t._v("若在执行微任务的过程中，产生新的微任务，同样会将其添加到微任务队列，V8引擎一直循环执行微任务队列中的任务，直至队列为空。")]),t._v(" "),v("li",[t._v("执行微任务的过程中产生的新的微任务不会推迟到下个宏任务中执行，而是继续在当前宏任务中执行。")])]),t._v(" "),v("h3",{attrs:{id:"关键点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关键点"}},[t._v("#")]),t._v(" 关键点")]),t._v(" "),v("ul",[v("li",[t._v("微任务和宏任务是绑定的，每个宏任务执行会创建自己的微任务队列。")]),t._v(" "),v("li",[t._v("微任务的执行时长影响到当前宏任务的时间")]),t._v(" "),v("li",[t._v("宏任务中，分别创建一个用于回调的宏任务和微任务，微任务都是比宏任务早执行的。")])]),t._v(" "),v("h2",{attrs:{id:"需求-监听dom变化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#需求-监听dom变化"}},[t._v("#")]),t._v(" 需求：监听DOM变化")]),t._v(" "),v("h3",{attrs:{id:"早期方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#早期方案"}},[t._v("#")]),t._v(" 早期方案")]),t._v(" "),v("p",[t._v("轮询检测：使用setTimeout、setInterval定时检测DOM是否改变。"),v("br"),t._v("\n缺陷：时间间隔过长，DOM变化响应不及时；时间间隔过短，浪费性能检查DOM。")]),t._v(" "),v("h3",{attrs:{id:"mutation-event-已废弃"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mutation-event-已废弃"}},[t._v("#")]),t._v(" "),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mutation Event（已废弃）"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("Mutation Event采用观察者模式，DOM发生变化立刻触发事件，这种属于同步回调。"),v("br"),t._v("\n好处：解决了实时性的问题，一旦DOM变化，立刻调用JavaScript接口。"),v("br"),t._v("\n缺陷：每次DOM变化，渲染引擎调用JavaScript，产生性能开销。比如JavaScript创建多个DOM节点，会触发多次回调，每次回调都需要一定的执行事件，若此时浏览器正在执行动画效果，会造成动画卡顿。因此Mutation Event已经从标准事件中被删除了。")]),t._v(" "),v("h3",{attrs:{id:"mutationobserver"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver"}},[t._v("#")]),t._v(" MutationObserver")]),t._v(" "),v("p",[t._v("解决同步回调调用JavaScript产生的性能问题，DOM4开始推荐使用MutationObserver，\nMutationObserver API可以监听DOM变化。"),v("br"),t._v("\n好处："),v("strong",[t._v("将响应函数修改为异步调用")]),t._v("，可以不用每次DOM变化触发异步回调，而是等多次DOM变化之后，最后在一次触发异步回调，并且还会使用数据结构记录期间所有DOM的变化，即使频繁操纵DOM，也不会影响性能。"),v("br"),t._v("\n异步调用 + 减少触发次数缓解了性能问题，那如何保持任务通知回调的及时性？"),v("br"),t._v("\n如果用setTimeout创建宏任务触发回调，实时性就不太理想，所以借助微任务，"),v("strong",[t._v("每次DOM节点发生变化，渲染引擎将变化记录封装成微任务")]),t._v("，V8引擎按照顺序执行。")]),t._v(" "),v("ul",[v("li",[t._v("异步解决同步操作的性能问题。")]),t._v(" "),v("li",[t._v("微任务解决实时性的问题。")])]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("ul",[v("li",[t._v("异步回调的两种形式：宏任务、微任务。")]),t._v(" "),v("li",[t._v("JavaScript无法掌控宏任务在消息队列中的位置，就无法掌控任务的实时性，由此创建微任务队列，在当前宏任务之下去执行，确保任务的实时性。")]),t._v(" "),v("li",[t._v("宏任务内部维护一个微任务队列用于维护产生的微任务。")]),t._v(" "),v("li",[t._v("当前宏任务执行结束之前，会去执行微任务队列中的任务。")])])])}),[],!1,null,null,null);v.default=_.exports}}]);