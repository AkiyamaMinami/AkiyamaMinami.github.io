(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{444:function(t,a,v){"use strict";v.r(a);var r=v(2),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("关于V8：")]),t._v(" "),a("ul",[a("li",[t._v("Google Chrome浏览器、Node.js的一部分。")]),t._v(" "),a("li",[t._v("负责去解析执行JavaScript代码。")])]),t._v(" "),a("p",[t._v("JavaScript自身是轻量级"),a("strong",[t._v("解释型语言")]),t._v("。从技术层面看，现代浏览器引擎都采用了"),a("strong",[t._v("即时编译")]),t._v("（Just-In-Time Compiling）技术让源码执行的更快。"),a("br"),t._v("\n机器无法直接理解我们所写的代码，所以执行代码之前，需要先把代码”"),a("strong",[t._v("翻译（编译器、解释器）")]),t._v("“成机器能理解的机器语言。一般可以把语言分为两类："),a("strong",[t._v("编译型、解释型")]),t._v("。上面说的"),a("strong",[t._v("即时编译")]),t._v("，意思是编译 + 解释的结合体。"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN - JavaScript"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("一切都是为了执行效率")])]),a("h3",{attrs:{id:"为何采用先编译后解释执行的方案呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为何采用先编译后解释执行的方案呢"}},[t._v("#")]),t._v(" 为何采用先编译后解释执行的方案呢？")]),t._v(" "),a("p",[t._v("JavaScript每次执行都要去先编译再去执行，为什么不能像Java一样，一次编译成可执行文件，“随处”运行呢？这样不就不用每次执行都要走一遍编译流程了嘛？"),a("br"),t._v("\n问题点：")]),t._v(" "),a("ul",[a("li",[t._v("无法统一客户用的浏览器版本（Java执行文件我们是可以指定运行环境和版本的）。")]),t._v(" "),a("li",[t._v("ECMAScript本身规范也不断的更新（JavaScript这种语言面对文本展示的场景，更新频率比Java快）。")]),t._v(" "),a("li",[t._v("各家浏览器厂商对于JavaScript语言特性支持度不统一。")])]),t._v(" "),a("p",[t._v("面对这些情况下，如果让JavaScript编译成“可执行”文件，很有可能出现某些浏览器运行不了，某些语言特性失效。所以让JavaScript编译成可执行文件这种提案目前来说比较难推进。\n"),a("a",{attrs:{href:"https://github.com/tc39/proposal-binary-ast",target:"_blank",rel:"noopener noreferrer"}},[t._v("二进制AST提案"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"编译器、解释器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器、解释器"}},[t._v("#")]),t._v(" 编译器、解释器")]),t._v(" "),a("h3",{attrs:{id:"编译型语言执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译型语言执行流程"}},[t._v("#")]),t._v(" 编译型语言执行流程")]),t._v(" "),a("p",[t._v("编译过程：源代码 => 词法分析、语法分析 => 生成抽象语法树（AST） => 优化代码 => 生成"),a("strong",[t._v("机器码")]),t._v("。"),a("br"),t._v("\n若编译成功，生成一个可执行文件，若编译发生错误，编译器会抛出异常，停止编译。")]),t._v(" "),a("h3",{attrs:{id:"解释型语言执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释型语言执行流程"}},[t._v("#")]),t._v(" 解释型语言执行流程")]),t._v(" "),a("p",[t._v("解释过程：源代码 => 词法分析、语法分析 => 生成抽象语法树（AST） => 生成"),a("strong",[t._v("字节码")]),t._v(" => 执行程序。")]),t._v(" "),a("h3",{attrs:{id:"字节码和机器码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节码和机器码"}},[t._v("#")]),t._v(" 字节码和机器码")]),t._v(" "),a("p",[t._v("字节码介于AST和机器码中间。需要通过解释器转成机器码才能执行。\n"),a("strong",[t._v("字节码所占用的内存比机器码要小")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"v8执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8执行流程"}},[t._v("#")]),t._v(" V8执行流程")]),t._v(" "),a("p",[t._v("V8执行过程中，"),a("strong",[t._v("同时有用到编译器（TurboFan）和解释器（Ignition）")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("TurboFan：涡轮增压发动机 => 负责加速、优化代码执行效率"),a("br"),t._v("\nIgnition：点火器 => 负责启动、负责执行代码")])]),t._v(" "),a("h3",{attrs:{id:"总览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总览"}},[t._v("#")]),t._v(" 总览")]),t._v(" "),a("p",[t._v("源代码 => 词法分析、语法分析 => "),a("strong",[t._v("生成抽象语法树（AST）、执行上下文")]),t._v(" => 生成字节码 => 执行代码（执行的过程中不断优化）")]),t._v(" "),a("h3",{attrs:{id:"生成抽象语法树-ast-、执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成抽象语法树-ast-、执行上下文"}},[t._v("#")]),t._v(" 生成抽象语法树（AST）、执行上下文")]),t._v(" "),a("p",[t._v("我们能够理解的是高级语言，对于编译器、解释器能理解的是AST。有点类似于浏览器的渲染引擎能理解HTML文件生成的DOM树。"),a("br"),t._v("\nAST是一种比较重要的数据结构，我们平时碰到的Babel（JS转码）、ESLint（检查JavaScript编写规范）都有涉及。"),a("br")]),t._v(" "),a("blockquote",[a("p",[t._v("Babel：ES6转ES5 => ES6源码转成AST => 转成ES5的AST => 生成JavaScript源码。"),a("br"),t._v("\nESLint：源码转AST => 分析AST检查代码规范。")])]),t._v(" "),a("p",[t._v("生成AST的两个阶段：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("词法分析（tokenize）")]),a("br"),t._v("\n将源码一行行拆解为一个个的token（在语法上不可再分、最小的单个字符或字符串）。")]),t._v(" "),a("li",[a("strong",[t._v("解析（parse）")]),a("br"),t._v("\n将生成的token，依据语法规则生成AST。代码若有语法错误，在这一步会中止，抛出语法错误\n。")])]),t._v(" "),a("p",[t._v("生成AST后，继续生成"),a("strong",[t._v("执行上下文")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"生成字节码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成字节码"}},[t._v("#")]),t._v(" 生成字节码")]),t._v(" "),a("p",[t._v("此时需要解释器（Ignition）根据AST去生成字节码，并且执行。")]),t._v(" "),a("blockquote",[a("p",[t._v("在过去，V8并没有字节码的引入，直接是AST转成机器码，机器码的执行效率是很高的。但是随着时代的变迁，移动端的发展，浏览器在手机上运行，手机本身内存会小，V8需要消耗很多内存去保存转换的机器码，为了解决这个内存占用的问题，V8重构引入字节码。")])]),t._v(" "),a("h3",{attrs:{id:"执行代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行代码"}},[t._v("#")]),t._v(" 执行代码")]),t._v(" "),a("p",[t._v("解释器（Ignition）逐条执行字节码，执行过程中若发现热点代码（HotSpot、经常需要重复执行的代码），通过编译器（TurboFan）将热点代码的字节码编译为高效的机器码，当代码再次执行，直接执行机器码，提高效率。"),a("strong",[a("s",[t._v("所以说JavaScript代码越执行越久越快哈哈哈")])]),t._v("。"),a("br"),t._v("\n这种字节码配合解释器和编译器的技术，称之为"),a("strong",[t._v("即时编译（JIT）")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"我们自身如何去优化javascript执行效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们自身如何去优化javascript执行效率"}},[t._v("#")]),t._v(" 我们自身如何去优化JavaScript执行效率")]),t._v(" "),a("ul",[a("li",[t._v("提升单次脚本执行速度，避免JavaScript霸占主线程很久，让页面能快速响应交互。")]),t._v(" "),a("li",[t._v("避免内联脚本，解析JavaScript的过程中，解析、编译也是会占用主线程的。")]),t._v(" "),a("li",[t._v("减少JavaScript文件大小，文件越小，提高下载速度，减少内存占用。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);